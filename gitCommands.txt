Git Commands 


Basic Git Commands
git init

This command initiates a new Git repository within a directory. Here’s the basic git init usage:

git init
To create a new repository while specifying the project’s name, use the following command:

git init [project name]
git add

This command is used to stage file changes, preparing them for the next commit:

git add file1.txt
git commit

Use this command to create a commit message for the changes, making them part of your project’s history:

git commit -m "Add new feature"
git status

This command displays valuable insights into your files’ modifications and staging status.

git status
git log

The basic git log usage lets you view a chronological list of commit history:

git log
git diff

This command lets you compare changes between your working directory and the most recent commit. For example, this git diff usage identifies the differences in a specific file:

git diff file1.txt
To compare changes between two commits, use the following:

git diff commit1 commit2
git rm

This command removes files from your working directory and stages the removal for the next commit.

git rm file1.txt
git mv

Use this command to rename and move files within your working directory. Here’s the Git command to rename a file:

git mv file1.txt file2.txt
To move a file to a different directory, enter:

git mv file1.txt new_directory/
git config

This command configures various aspects of Git, including user information and preferences. For example, enter this command to set your email address for commits:

git config --global user.email "your.email@example.com"
The –global flag applies the configurations universally, impacting your local repository.

Git Branching and Merging Commands
git branch

Use this command to manage branches in your Git repository. Here’s the basic git branch usage to list all existing branches:

git branch
To create a Git branch named “feature”, use:

git branch feature
To rename a Git branch, enter this command:

git branch -m branch-name new-branch-name
git checkout

This command lets you switch between branches and restore files from different commits.

The following is a git checkout usage to switch to an existing branch:

git checkout branch_name
To discard changes to a specific file and revert it to the last commit, use:

git checkout -- file_name
git merge

To combine a feature or topic branch into the main Git branch, use this command. Below is an example of the basic git merge usage:

git merge branch_name
git cherry-pick

This command allows you to apply specific commits from one branch to another without merging an entire branch.

git cherry-pick commit_hash
git rebase

This command is used to apply changes from one Git branch to another by moving or combining commits. It helps maintain a cleaner commit history:

git rebase main
git tag

This command marks specific points in your Git history, such as v1.0 or v2.0:

git tag v1.0

